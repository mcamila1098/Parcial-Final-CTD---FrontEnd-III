{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maria\\\\OneDrive\\\\Escritorio\\\\Certified Tech Developer\\\\Bimestre VI\\\\FrontEnd III\\\\Parcial Final\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { useState } from \"react\";\nimport { initialState } from \"./reducer\";\n/* export const initialState = {theme: \"\", data: []}\r\n\r\nexport const themes = {\r\n  light: {\r\n    font: 'black',\r\n    background: 'white'\r\n  },\r\n  dark: {\r\n    font: 'white',\r\n    background: 'black'\r\n  }\r\n};\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n}; */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GLOBAL_STATE = {\n  theme: \"\"\n}; // Define the reducer\n\nconst globalReducer = (state, action) => {\n  switch (action.type) {\n    case \"light\":\n      return { ...state,\n        theme: 'light'\n      };\n\n    case \"dark\":\n      return { ...state,\n        theme: 'dark'\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const GlobalState = /*#__PURE__*/createContext();\nexport const GlobalStateProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(globalReducer, GLOBAL_STATE);\n  const value = { ...state,\n    light: () => {\n      dispatch({\n        type: \"light\"\n      });\n    },\n    dark: () => {\n      dispatch({\n        type: \"dark\"\n      });\n    }\n  }; // Wrap the context provider around our component\n\n  return /*#__PURE__*/_jsxDEV(GlobalState.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_s(GlobalStateProvider, \"EaM67uV0+9pU6Yf9zUiq+6nKXF4=\");\n\n_c = GlobalStateProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStateProvider\");","map":{"version":3,"names":["createContext","useReducer","useState","initialState","GLOBAL_STATE","theme","globalReducer","state","action","type","GlobalState","GlobalStateProvider","children","dispatch","value","light","dark"],"sources":["C:/Users/maria/OneDrive/Escritorio/Certified Tech Developer/Bimestre VI/FrontEnd III/Parcial Final/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { initialState } from \"./reducer\";\r\n\r\n/* export const initialState = {theme: \"\", data: []}\r\n\r\nexport const themes = {\r\n  light: {\r\n    font: 'black',\r\n    background: 'white'\r\n  },\r\n  dark: {\r\n    font: 'white',\r\n    background: 'black'\r\n  }\r\n};\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n}; */\r\n\r\nconst GLOBAL_STATE = {\r\n  theme: \"\"\r\n}\r\n\r\n// Define the reducer\r\nconst globalReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"light\":\r\n      return {\r\n        ...state,\r\n        theme: 'light'\r\n      };\r\n    case \"dark\":\r\n      return {\r\n        ...state,\r\n        theme: 'dark'\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const GlobalState = createContext();\r\nexport const GlobalStateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(globalReducer, GLOBAL_STATE);\r\n  const value = {\r\n    ...state,\r\n    light: () => {\r\n      dispatch({ type: \"light\" });\r\n    },\r\n    dark: () => {\r\n      dispatch({ type: \"dark\" });\r\n    }\r\n  };\r\n  // Wrap the context provider around our component\r\n  return <GlobalState.Provider value={value}>{children}</GlobalState.Provider>;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AADY,CAArB,C,CAIA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACvC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,OAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELF,KAAK,EAAE;MAFF,CAAP;;IAIF,KAAK,MAAL;MACE,OAAO,EACL,GAAGE,KADE;QAELF,KAAK,EAAE;MAFF,CAAP;;IAIF;MACE,OAAOE,KAAP;EAZJ;AAcD,CAfD;;AAiBA,OAAO,MAAMG,WAAW,gBAAGV,aAAa,EAAjC;AACP,OAAO,MAAMW,mBAAmB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACnD,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBZ,UAAU,CAACK,aAAD,EAAgBF,YAAhB,CAApC;EACA,MAAMU,KAAK,GAAG,EACZ,GAAGP,KADS;IAEZQ,KAAK,EAAE,MAAM;MACXF,QAAQ,CAAC;QAAEJ,IAAI,EAAE;MAAR,CAAD,CAAR;IACD,CAJW;IAKZO,IAAI,EAAE,MAAM;MACVH,QAAQ,CAAC;QAAEJ,IAAI,EAAE;MAAR,CAAD,CAAR;IACD;EAPW,CAAd,CAFmD,CAWnD;;EACA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEK,KAA7B;IAAA,UAAqCF;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAbM;;GAAMD,mB;;KAAAA,mB"},"metadata":{},"sourceType":"module"}